<?php
/**
 * Created by PhpStorm.
 * User: arvil
 * Date: 2019-04-14
 * Time: 21:24
 */

namespace BOH\Applications\MyBuildingsApp\RestEndpoints\Endpoints;

use Cocur\Slugify\Slugify;
use BOH\Applications\MyBuildingsApp\Resources\Resources;

class BuildingAddFile extends BuildingAddImage
{

	public $resources;

	public $allowed_file_types;

	public function __construct(Resources $resources)
	{
		$this->resources = $resources;
		$this->allowed_file_types = array(
			'image/jpeg',
			'image/png',
			'application/pdf',
			'application/msword',
			'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
		);

		parent::__construct($resources);
	}

	public function endpoint_name(): string
	{
		return 'building_add_file';
	}

	public function endpoint_route() : string {
		return '/building-add-file/(?P<building_id>\d+)';
	}

	public function endpoint_route_base() : string {
		return '/building-add-file/';
	}

	public function endpoint_method(): string
	{
		return 'POST';
	}

	public function endpoint_callback( \WP_REST_Request $request ) : \WP_REST_Response {
		$data = array();

		$building_id = $request->get_param( 'building_id' );
		$building_id = ( $building_id && filter_var( $building_id, FILTER_VALIDATE_INT ) ) ? (int) $building_id : null;

		// if not allowed to edit.
		if ( ! $this->is_allowed_to_edit($building_id) ) {
			return new \WP_REST_Response( $data, 403  );
		}

		if ( ! $building_id ) {
			return new \WP_REST_Response($data);
		}

		$uploadedfile = $request->get_file_params()['file'];

		$data['request']['file'] = $uploadedfile;

		// check if extension allowed.
		$type = $uploadedfile['type'];
		if ( ! in_array( $type, $this->allowed_file_types ) ) {
			return new \WP_REST_Response( $data, 403  );
		}

		if ( ! function_exists( 'wp_handle_upload' ) ) {
			require_once( ABSPATH . 'wp-admin/includes/file.php' );
		}
		if ( ! function_exists( 'wp_generate_attachment_metadata' ) ) {
			require_once( ABSPATH . 'wp-admin/includes/image.php' );
		}

		$upload_overrides = array( 'test_form' => false );
		$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );

		if ( $movefile && ! isset( $movefile['error'] ) ) {
			$data['$movefile'] = $movefile;
			// insert this image as this post's attachment.
			$attachment = array(
				'post_mime_type' => $movefile['type'],
				'post_title' => 'Public Liability Insurance Certificate of Currency',
				'post_content' => 'Public Liability Insurance Certificate of Currency',
				'post_status' => 'inherit'
			);
			$attachment_id = wp_insert_attachment($attachment, $movefile['file'], $building_id);
			$attach_data = wp_generate_attachment_metadata( $attachment_id, $movefile['file'] );
			wp_update_attachment_metadata( $attachment_id,  $attach_data );
			$data['output']['attachment']['id'] = $attachment_id;
			$data['output']['attachment']['url'] = wp_get_attachment_url($attachment_id);
			$data['output']['attachment']['name'] = basename($data['output']['attachment']['url']);
		} else {
			/**
			 * Error generated by _wp_handle_upload()
			 * @see _wp_handle_upload() in wp-admin/includes/file.php
			 */
			$data['error'] = $movefile['error'];
			return new \WP_REST_Response( $data, 500 );
		}

		return new \WP_REST_Response( $data );
	}

	public function cb_unique_filename_callback($dir, $name, $ext) {
//		error_log("\n dir \n".print_r($dir, true), 3, '/Users/arvil/Projects/brisbaneopenhouse.jsa.test/error.log');
//		error_log("\n name \n".print_r($name, true), 3, '/Users/arvil/Projects/brisbaneopenhouse.jsa.test/error.log');
//		error_log("\n ext \n".print_r($ext, true), 3, '/Users/arvil/Projects/brisbaneopenhouse.jsa.test/error.log');
		$slugify = new Slugify(['lowercase' => false]);
		return $name.$ext;
	}
}
